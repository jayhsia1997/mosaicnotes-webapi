"""Create user releated models

Revision ID: ea4e6b5c5a04
Revises: 8125ce6a58d2
Create Date: 2025-05-04 14:24:14.091148

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ea4e6b5c5a04'
down_revision: Union[str, None] = '8125ce6a58d2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('email', sa.String(length=64), nullable=False, comment='Email, unique identifier'),
    sa.Column('password_hash', sa.String(length=256), nullable=True, comment='Password hash'),
    sa.Column('salt', sa.String(length=64), nullable=True, comment='Salt for password hash'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='Primary Key'),
    sa.Column('remark', sa.String(length=256), nullable=True, comment='Remark'),
    sa.Column('delete_reason', sa.String(length=64), nullable=True, comment='Delete Reason'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Is Deleted(Logical Delete)'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='Create User ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Create Date'),
    sa.Column('created_by', sa.String(length=64), nullable=False, comment='Create User Name'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='Update User ID'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Update Date'),
    sa.Column('updated_by', sa.String(length=64), nullable=False, comment='Update User Name'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    schema='public'
    )
    op.create_table('user_profile',
    sa.Column('user_id', sa.String(length=64), nullable=False, comment='User ID'),
    sa.Column('display_name', sa.String(length=64), nullable=True, comment='Display name'),
    sa.Column('gender', sa.Integer(), nullable=True, comment='Refer to Gender enum'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='Primary Key'),
    sa.Column('delete_reason', sa.String(length=64), nullable=True, comment='Delete Reason'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Is Deleted(Logical Delete)'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='Create User ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Create Date'),
    sa.Column('created_by', sa.String(length=64), nullable=False, comment='Create User Name'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='Update User ID'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Update Date'),
    sa.Column('updated_by', sa.String(length=64), nullable=False, comment='Update User Name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id'),
    schema='public'
    )
    op.create_table('user_session',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID'),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Session data'),
    sa.Column('expired_at', sa.TIMESTAMP(), nullable=True, comment='Session expiration time'),
    sa.Column('ip_address', sa.String(length=64), nullable=True, comment='User IP address'),
    sa.Column('user_agent', sa.String(length=256), nullable=True, comment='User agent'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='Primary Key'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Create Date'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Update Date'),
    sa.ForeignKeyConstraint(['user_id'], ['public.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index(op.f('ix_public_user_session_user_id'), 'user_session', ['user_id'], unique=False, schema='public')
    op.alter_column('demo', 'updated_by',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=64),
               existing_comment='Update User Name',
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('demo', 'updated_by',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=32),
               existing_comment='Update User Name',
               existing_nullable=False)
    op.drop_index(op.f('ix_public_user_session_user_id'), table_name='user_session', schema='public')
    op.drop_table('user_session', schema='public')
    op.drop_table('user_profile', schema='public')
    op.drop_table('user', schema='public')
    # ### end Alembic commands ###
